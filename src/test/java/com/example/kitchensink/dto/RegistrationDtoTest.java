package com.example.kitchensink.dto;

import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.ValidatorFactory;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;

class RegistrationDtoTest {

    private Validator validator;

    @BeforeEach
    void setUp() {
        // Initialize the validator for validation tests
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        validator = factory.getValidator();
    }

    @Test
    void testLombokGeneratedMethods() {
        // Create a RegistrationDto instance with explicit ID and other fields
        RegistrationDto registrationDto = new RegistrationDto();
        registrationDto.setId(1L);  // Explicitly set the id
        registrationDto.setUsername("testuser");
        registrationDto.setEmail("test@example.com");
        registrationDto.setPassword("password");

        // Create another RegistrationDto with the same values, including the ID
        RegistrationDto anotherDto = new RegistrationDto();
        anotherDto.setId(1L);  // Explicitly set the id
        anotherDto.setUsername("testuser");
        anotherDto.setEmail("test@example.com");
        anotherDto.setPassword("password");

        // Test getter methods (Lombok generated)
        assertEquals("testuser", registrationDto.getUsername());
        assertEquals("test@example.com", registrationDto.getEmail());
        assertEquals("password", registrationDto.getPassword());

        // Test the toString method (generated by Lombok)
        assertTrue(registrationDto.toString().contains("testuser"));
        assertTrue(registrationDto.toString().contains("test@example.com"));

        // Test equals and hashCode (generated by Lombok)
        assertEquals(registrationDto, anotherDto);  // Equals should be true for identical objects
        assertEquals(registrationDto.hashCode(), anotherDto.hashCode());  // hashCode should also match
    }


    @Test
    void testValidation_ValidData() {
        // Create a valid RegistrationDto instance
        RegistrationDto registrationDto = new RegistrationDto();
        registrationDto.setUsername("validuser");
        registrationDto.setEmail("valid@example.com");
        registrationDto.setPassword("validpassword");

        // Validate the RegistrationDto object
        Set<ConstraintViolation<RegistrationDto>> violations = validator.validate(registrationDto);

        // Assert that there are no validation violations
        assertTrue(violations.isEmpty(), "There should be no validation errors for valid data");
    }

    @Test
    void testValidation_UsernameNotEmpty() {
        // Create a RegistrationDto with an empty username
        RegistrationDto registrationDto = new RegistrationDto();
        registrationDto.setUsername("");
        registrationDto.setEmail("valid@example.com");
        registrationDto.setPassword("validpassword");

        // Validate the RegistrationDto object
        Set<ConstraintViolation<RegistrationDto>> violations = validator.validate(registrationDto);

        // Assert that there is one violation (username cannot be empty)
        assertFalse(violations.isEmpty(), "There should be a validation error for the username");
        assertEquals(1, violations.size(), "There should be one validation violation");
        assertEquals("username", violations.iterator().next().getPropertyPath().toString());
    }

    @Test
    void testValidation_EmailNotEmpty() {
        // Create a RegistrationDto with an empty email
        RegistrationDto registrationDto = new RegistrationDto();
        registrationDto.setUsername("validuser");
        registrationDto.setEmail("");
        registrationDto.setPassword("validpassword");

        // Validate the RegistrationDto object
        Set<ConstraintViolation<RegistrationDto>> violations = validator.validate(registrationDto);

        // Assert that there is one violation (email cannot be empty)
        assertFalse(violations.isEmpty(), "There should be a validation error for the email");
        assertEquals(1, violations.size(), "There should be one validation violation");
        assertEquals("email", violations.iterator().next().getPropertyPath().toString());
    }

    @Test
    void testValidation_PasswordNotEmpty() {
        // Create a RegistrationDto with an empty password
        RegistrationDto registrationDto = new RegistrationDto();
        registrationDto.setUsername("validuser");
        registrationDto.setEmail("valid@example.com");
        registrationDto.setPassword("");

        // Validate the RegistrationDto object
        Set<ConstraintViolation<RegistrationDto>> violations = validator.validate(registrationDto);

        // Assert that there is one violation (password cannot be empty)
        assertFalse(violations.isEmpty(), "There should be a validation error for the password");
        assertEquals(1, violations.size(), "There should be one validation violation");
        assertEquals("password", violations.iterator().next().getPropertyPath().toString());
    }

    @Test
    void testValidation_AllFieldsEmpty() {
        // Create a RegistrationDto with all empty fields
        RegistrationDto registrationDto = new RegistrationDto();
        registrationDto.setUsername("");
        registrationDto.setEmail("");
        registrationDto.setPassword("");

        // Validate the RegistrationDto object
        Set<ConstraintViolation<RegistrationDto>> violations = validator.validate(registrationDto);

        // Assert that there are violations for all fields
        assertFalse(violations.isEmpty(), "There should be validation errors for all fields");
        assertEquals(3, violations.size(), "There should be three validation violations");
    }
}
